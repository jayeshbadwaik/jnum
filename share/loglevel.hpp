// Generated by enumeration.py. Do not modify this file manually.
#ifndef TEST_JNUM_LOGLEVEL_HPP
#define TEST_JNUM_LOGLEVEL_HPP

#include <string_view>
#include <array>
#include <jnum/jnum.hpp>

namespace test_jnum {

struct log_level { 
public: 
  // Underlying Type
  using underlying_type = std::size_t;

  // Underlying Enumeration Class
  enum class enum_type : underlying_type { quiet = 0, normal = 10 };

  // Identifier String
  static constexpr std::string_view string = "log_level";

  // Identifier String
  static constexpr   std::string_view namespace_string = "test_jnum";

  // Option List Declaration
  static const log_level quiet;
  static const log_level normal;

  // Number of Options
  static constexpr std::size_t noption = 2;

  // List of Possible Options
  using option_array_t  = std::array<log_level,noption>;

  // List of Possible Options
  static const option_array_t option_array;

  // List of Strings of Possible Options
  static constexpr auto option_string_array
    = jnum::detail::make_array(
      std::string_view("quiet"),
      std::string_view("normal")
    );

  // Default Constructor
  constexpr log_level() = default;

private: 
  // State of the Struct
  enum_type e_{enum_type::normal};

  // Private Constructor
  constexpr log_level(enum_type const& e) : e_(e) {}

public: 
  // Converting to Underlying Type
  constexpr  underlying_type underlying_value()   const { return static_cast<underlying_type>(e_); }

  // Implicit Conversion to Enumeration
  constexpr operator enum_type() const { return e_; }
}; 

// List of Possible Options
inline constexpr log_level::option_array_t log_level::option_array
   = jnum::detail::make_array(
      log_level(log_level::enum_type::quiet),
      log_level(log_level::enum_type::normal)
    );

// Option List Definition
inline constexpr log_level log_level::quiet(enum_type::quiet);
inline constexpr log_level log_level::normal(enum_type::normal);
} // namespace test_jnum

namespace jnum {
template<>
struct is_jnum<test_jnum::log_level> : std::true_type {
};
} // namespace jnum

#endif // TEST_JNUM_LOGLEVEL_HPP
